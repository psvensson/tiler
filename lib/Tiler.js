// Generated by CoffeeScript 1.10.0
(function() {
  var BAD_TILE, QuadTree, Siblings, TILE_SIDE, Tiler, all, debug, defer, lru, lruopts,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  QuadTree = require('area-qt');

  defer = require('node-promise').defer;

  all = require('node-promise').allOrNone;

  lru = require('lru');

  Siblings = require('./TilerSiblings');

  debug = process.env["DEBUG"];

  lruopts = {
    max: 1000,
    maxAgeInMilliseconds: 1000 * 60 * 60 * 24 * 4
  };

  TILE_SIDE = 20;

  BAD_TILE = {
    x: 0,
    y: 0,
    type: -1,
    ore: -1,
    stone: -1,
    features: []
  };

  "TODO:\n1. Add support for manipulating items and entities\n2. Detect and manage siblings through cacheEngine\n3. Replicate tile, item and entity updates to siblings";

  Tiler = (function() {
    function Tiler(storageEngine, cacheEngine, modelEngine, myAddress, sendFunction, registerForUpdatesFunction) {
      this.storageEngine = storageEngine;
      this.cacheEngine = cacheEngine;
      this.modelEngine = modelEngine;
      this.myAddress = myAddress;
      this.sendFunction = sendFunction;
      this.registerForUpdatesFunction = registerForUpdatesFunction;
      this.removeSomething = bind(this.removeSomething, this);
      this.setSomething = bind(this.setSomething, this);
      this.getSomething = bind(this.getSomething, this);
      this.createNewZone = bind(this.createNewZone, this);
      this.resolveZoneFor = bind(this.resolveZoneFor, this);
      this.setAndPersistTiles = bind(this.setAndPersistTiles, this);
      this.setTileAt = bind(this.setTileAt, this);
      this.getTileAt = bind(this.getTileAt, this);
      this.getEntityAt = bind(this.getEntityAt, this);
      this.getItemAt = bind(this.getItemAt, this);
      this.updateEntity = bind(this.updateEntity, this);
      this.removeEntity = bind(this.removeEntity, this);
      this.addEntity = bind(this.addEntity, this);
      this.createEntity = bind(this.createEntity, this);
      this.updateItem = bind(this.updateItem, this);
      this.removeItem = bind(this.removeItem, this);
      this.addItem = bind(this.addItem, this);
      this.createItem = bind(this.createItem, this);
      this.onSiblingUpdate = bind(this.onSiblingUpdate, this);
      this.persistDirtyZones = bind(this.persistDirtyZones, this);
      this.onZoneEvicted = bind(this.onZoneEvicted, this);
      this.dirtyZones = {};
      this.zones = new lru(lruopts);
      this.zoneItemQuadTrees = {};
      this.zoneEntityQuadTrees = {};
      this.zones.on('evict', this.onZoneEvicted);
      this.registerForUpdatesFunction(this);
      this.siblings = new Siblings(this.myAddress, this.cacheEngine, this.modelEngine, this.sendFunction);
    }

    Tiler.prototype.onZoneEvicted = function(zoneObj) {
      return this.siblings.deRegisterAsSiblingForZone(zoneObj);
    };

    Tiler.prototype.persistDirtyZones = function() {
      var a, b, count, k, q, ref, ref1, zone;
      q = defer();
      count = 0;
      ref = this.dirtyZones;
      for (a in ref) {
        b = ref[a];
        count++;
      }
      ref1 = this.dirtyZones;
      for (k in ref1) {
        zone = ref1[k];
        console.log('persistDirtyZone persisting ' + zone.name);
        zone.serialize().then((function(_this) {
          return function() {
            if (--count === 0) {
              _this.dirtyZones = {};
              return q.resolve();
            }
          };
        })(this));
      }
      return q;
    };

    Tiler.prototype.onSiblingUpdate = function(_command) {
      var arg1, arg2, command;
      command = JSON.parse(_command);
      console.log('Tiler.onSiblingUpdate called for tiler ' + this.myAddress);
      arg1 = command.arg1;
      arg2 = command.arg2;
      switch (command.cmd) {
        case Siblings.CMD_SET_TILE:
          return this.setTileAt(arg1, arg2, true);
        case Siblings.CMD_ADD_ITEM:
          return this.addItem(arg1, arg2, true);
        case Siblings.CMD_REMOVE_ITEM:
          return this.removeItem(arg1, arg2, true);
        case Siblings.CMD_UPDATE_ITEM:
          return console.log('got external update to item (unimplemented)');
        case Siblings.CMD_ADD_ENTITY:
          return this.addEntity(arg1, arg2, true);
        case Siblings.CMD_REMOVE_ENTITY:
          return this.removeEntity(arg1, arg2, true);
        case Siblings.CMD_UPDATE_ENTITY:
          return console.log('got external update to entity (unimplemented)');
      }
    };

    Tiler.prototype.createItem = function(level, itemRecord) {
      var q;
      q = defer();
      if (!level || !itemRecord || !itemRecord.x || !itemRecord.y) {
        q.reject('Tiler.createItem got bad item!!');
      } else {
        this.modelEngine.createItem(itemRecord).then((function(_this) {
          return function(itemObj) {
            itemObj.serialize();
            _this.addItem(level, itemObj);
            return q.resolve(itemObj);
          };
        })(this));
      }
      return q;
    };

    Tiler.prototype.addItem = function(level, item, doNotPropagate) {
      var q;
      q = defer();
      this.setSomething(level, item, this.zoneItemQuadTrees, 'items', q).then((function(_this) {
        return function() {
          if (!doNotPropagate) {
            return _this.siblings.sendCommand(zoneObj, Siblings.CMD_ADD_ITEM, level, item);
          }
        };
      })(this));
      return q;
    };

    Tiler.prototype.removeItem = function(level, item, doNotPropagate) {
      var q;
      q = defer();
      this.removeSomething(level, item, this.zoneItemQuadTrees, 'items', q).then((function(_this) {
        return function(zoneObj) {
          if (!doNotPropagate) {
            return _this.siblings.sendCommand(zoneObj, Siblings.CMD_REMOVE_ITEM, level, item);
          }
        };
      })(this));
      return q;
    };

    Tiler.prototype.updateItem = function(level, item, doNotPropagate) {
      if (!doNotPropagate) {
        this.siblings.sendCommand(zoneObj, Siblings.CMD_UPDATE_ITEM, level, item);
      }
      return this.modelEngine.updateObject(item);
    };

    Tiler.prototype.createEntity = function(level, entityRecord) {
      var q;
      q = defer();
      if (!entity || !entityRecord || !entityRecord.x || !entityRecord.y) {
        q.reject('Tiler.createEntity got bad entity!!');
      } else {
        this.modelEngine.createEntity(entityRecord).then((function(_this) {
          return function(entityObj) {
            entityObj.serialize();
            _this.addEntity(level, entityObj);
            return q.resolve(entityObj);
          };
        })(this));
      }
      return q;
    };

    Tiler.prototype.addEntity = function(level, entity, doNotPropagate) {
      var q;
      q = defer();
      this.setSomething(level, entity, this.zoneEntityQuadTrees, 'entities', q).then((function(_this) {
        return function(zoneObj) {
          if (!doNotPropagate) {
            return _this.siblings.sendCommand(zoneObj, Siblings.CMD_ADD_ENTITY, level, entity);
          }
        };
      })(this));
      return q;
    };

    Tiler.prototype.removeEntity = function(level, entity, doNotPropagate) {
      var q;
      q = defer();
      this.removeSomething(level, entity, this.zoneEntityQuadTrees, 'entities', q).then((function(_this) {
        return function(zoneObj) {
          if (!doNotPropagate) {
            return _this.siblings.sendCommand(zoneObj, Siblings.CMD_REMOVE_ENTITY, level, entity);
          }
        };
      })(this));
      return q;
    };

    Tiler.prototype.updateEntity = function(level, entity, doNotPropagate) {
      if (!doNotPropagate) {
        this.siblings.sendCommand(zoneObj, Siblings.CMD_UPDATE_ENTITY, level, entity);
      }
      return this.modelEngine.updateObject(entity);
    };

    Tiler.prototype.getItemAt = function(level, x, y) {
      var q;
      q = defer();
      if (!level || (!x && x !== 0) || (!y && y !== 0)) {
        q.reject('Tiler.getTileAt got wrong parameters ');
      } else {
        this.getSomething(level, x, y, this.zoneItemQuadTrees, q);
      }
      return q;
    };

    Tiler.prototype.getEntityAt = function(level, x, y) {
      var q;
      q = defer();
      if (!level || (!x && x !== 0) || (!y && y !== 0)) {
        q.reject('Tiler.getTileAt got wrong parameters ');
      } else {
        this.getSomething(level, x, y, this.zoneEntityQuadTrees, q);
      }
      return q;
    };

    Tiler.prototype.getTileAt = function(level, x, y) {
      var q;
      q = defer();
      if (!level || (!x && x !== 0) || (!y && y !== 0)) {
        q.reject('Tiler.getTileAt wrong parameters ');
      } else {
        this.resolveZoneFor(level, x, y).then(function(zone) {
          if (zone) {
            return q.resolve(zone.tiles[x + '_' + y]);
          } else {
            return q.resolve(BAD_TILE);
          }
        }, function() {
          console.log('getTileAt got reject from resolveZoneFor for level ' + level + ' x ' + x + ' y ' + y);
          return q.reject('could not resolve zone tileid for ' + (arguments.join('_')));
        });
      }
      return q;
    };

    Tiler.prototype.setTileAt = function(level, tile, doNotPropagate) {
      var q, x, y;
      if (debug) {
        console.log('setTileAt for tiler ' + this.myAddress + ' called');
      }
      q = defer();
      if (!tile || (tile && !tile.type) || (!tile.x && tile.x !== 0) || (!tile.y && tile.y !== 0)) {
        if (debug) {
          console.dir(tile);
        }
        q.reject("bad tile format");
      } else {
        x = tile.x;
        y = tile.y;
        this.resolveZoneFor(level, x, y).then((function(_this) {
          return function(zone) {
            zone.tiles[x + '_' + y] = tile;
            if (!doNotPropagate) {
              _this.siblings.sendCommand(zone, Siblings.CMD_SET_TILE, level, tile);
            }
            return q.resolve(tile);
          };
        })(this));
      }
      return q;
    };

    Tiler.prototype.setAndPersistTiles = function(level, tiles) {
      var count, error, q, success, tileOps, zonesAffected;
      q = defer();
      count = tiles.length;
      zonesAffected = {};
      tileOps = [];
      error = function(err) {
        console.log('setAndPersistTiles error: ' + err);
        return q.reject(err);
      };
      success = function(tiles) {
        var k, v;
        for (k in zonesAffected) {
          v = zonesAffected[k];
          v.serialize();
        }
        return q.resolve(tiles);
      };
      tiles.forEach((function(_this) {
        return function(tile) {
          return _this.resolveZoneFor(level, tile.x, tile.y).then(function(zone) {
            zonesAffected[zone.id] = zone;
            tileOps.push(_this.setTileAt(level, tile));
            if (--count === 0) {
              return all(tileOps, error).then(success, error);
            }
          });
        };
      })(this));
      return q;
    };

    Tiler.prototype.resolveZoneFor = function(level, x, y) {
      var lruZone, q, registerZone, tileid;
      q = defer();
      registerZone = (function(_this) {
        return function(q, zoneObj) {
          var arr, entityQT, itemQT;
          arr = zoneObj.tileid.split('_');
          x = arr[1];
          y = arr[2];
          itemQT = new QuadTree({
            x: x,
            y: y,
            height: TILE_SIDE,
            width: TILE_SIDE
          });
          _this.zoneItemQuadTrees[zoneObj.tileid] = itemQT;
          entityQT = new QuadTree({
            x: x,
            y: y,
            height: TILE_SIDE,
            width: TILE_SIDE
          });
          _this.zoneEntityQuadTrees[zoneObj.tileid] = entityQT;
          _this.zones.set(tileid, zoneObj);
          _this.siblings.registerAsSiblingForZone(zoneObj);
          return q.resolve(zoneObj);
        };
      })(this);
      tileid = this.getZoneIdFor(level, x, y);
      lruZone = this.zones.get(tileid);
      if (lruZone) {
        q.resolve(lruZone);
      } else {
        this.cacheEngine.get(tileid).then((function(_this) {
          return function(exists) {
            if (exists) {
              return _this.storageEngine.find('Zone', 'tileid', tileid).then(function(zoneObj) {
                if (zoneObj) {
                  return registerZone(q, zoneObj);
                } else {
                  console.log('** Tiler Could not find supposedly existing zone ' + tileid + ' !!!!!');
                  return q.reject(BAD_TILE);
                }
              });
            } else {
              return _this.createNewZone(tileid).then(function(zoneObj) {
                return registerZone(q, zoneObj);
              });
            }
          };
        })(this));
      }
      return q;
    };

    Tiler.prototype.createNewZone = function(tileid) {
      var newzone, q;
      q = defer();
      newzone = {
        name: 'Zone_' + tileid,
        type: 'Zone',
        id: tileid,
        tileid: tileid,
        items: [],
        entities: [],
        tiles: []
      };
      this.modelEngine.createZone(newzone).then((function(_this) {
        return function(zoneObj) {
          zoneObj.serialize();
          _this.zones.set(tileid, zoneObj);
          return _this.cacheEngine.set(tileid, 1).then(function() {
            return q.resolve(zoneObj);
          });
        };
      })(this));
      return q;
    };

    Tiler.prototype.getSomething = function(level, x, y, qthash, q) {
      return this.resolveZoneFor(level, x, y).then((function(_this) {
        return function(zoneObj) {
          var qt, something;
          if (zoneObj) {
            qt = qthash[zoneObj.tileid];
            something = qt.retrieve({
              x: x,
              y: y
            });
            return q.resolve(something[0]);
          }
        };
      })(this), function() {
        console.log('getSomething got reject from resolveZoneFor for level ' + level + ' x ' + x + ' y ' + y);
        return q.reject('could not resolve zone tileid for ' + (arguments.join('_')));
      });
    };

    Tiler.prototype.setSomething = function(level, something, qthash, propname, q) {
      var qq;
      qq = defer();
      this.resolveZoneFor(level, something.x, something.y).then((function(_this) {
        return function(zoneObj) {
          var found, i, j, len, qt, stuff, what;
          if (zoneObj) {
            qt = qthash[zoneObj.tileid];
            qt.insert(something);
            stuff = zoneObj[propname];
            for (i = j = 0, len = stuff.length; j < len; i = ++j) {
              what = stuff[i];
              if (what.id === something.id) {
                found = true;
                stuff[i] = something;
              }
            }
            if (!found) {
              stuff.push(something);
            }
            _this.dirtyZones[zoneObj.tileid] = zoneObj;
            q.resolve(true);
            return qq.resolve(zoneObj);
          }
        };
      })(this), function() {
        console.log('setSomething got reject from resolveZoneFor for level ' + level + ' x ' + x + ' y ' + y);
        q.reject('could not resolve zone tileid for level ' + level + ' and something ' + something.type + ' ' + something.id);
        return qq.resolve(false);
      });
      return qq;
    };

    Tiler.prototype.removeSomething = function(level, something, qthash, propname, q) {
      var qq;
      qq = defer();
      this.resolveZoneFor(level, something.x, something.y).then((function(_this) {
        return function(zoneObj) {
          var i, index, j, len, qt, stuff, what;
          if (zoneObj) {
            qt = qthash[zoneObj.tileid];
            qt.remove(something);
            _this.dirtyZones[zoneObj.tileid] = zoneObj;
            stuff = zoneObj[propname];
            index = -1;
            for (i = j = 0, len = stuff.length; j < len; i = ++j) {
              what = stuff[i];
              if (what.id === something.id) {
                index = i;
                break;
              }
            }
            if (index > -1) {
              stuff.splice(index, 1);
            }
            q.resolve(true);
            return qq.resolve(zoneObj);
          }
        };
      })(this), function() {
        console.log('removeSomething got reject from resolveZoneFor for level ' + level + ' x ' + x + ' y ' + y);
        return q.reject('could not resolve zone tileid for level ' + level + ' and something ' + something.type + ' ' + something.id);
      });
      return qq;
    };

    Tiler.prototype.getZoneIdFor = function(level, x, y) {
      var xr, yr, zx, zy;
      xr = x % TILE_SIDE;
      yr = y % TILE_SIDE;
      zx = x - xr;
      zy = y - yr;
      return level + '_' + zx + '_' + zy;
    };

    return Tiler;

  })();

  module.exports = Tiler;

}).call(this);

//# sourceMappingURL=Tiler.js.map

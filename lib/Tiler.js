// Generated by CoffeeScript 1.10.0
(function() {
  var BAD_TILE, QuadTree, TILE_SIDE, Tiler, all, defer, lru, lruopts,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  QuadTree = require('area-qt');

  defer = require('node-promise').defer;

  all = require('node-promise').allOrNone;

  lru = require('lru');

  lruopts = {
    max: 1000,
    maxAgeInMilliseconds: 1000 * 60 * 60 * 24 * 4
  };

  TILE_SIDE = 20;

  BAD_TILE = {
    x: 0,
    y: 0,
    type: -1,
    ore: -1,
    stone: -1,
    features: []
  };

  Tiler = (function() {
    function Tiler(storageEngine, cacheEngine, modelEngine) {
      this.storageEngine = storageEngine;
      this.cacheEngine = cacheEngine;
      this.modelEngine = modelEngine;
      this.resolveZoneFor = bind(this.resolveZoneFor, this);
      this.setAndPersistTiles = bind(this.setAndPersistTiles, this);
      this.setTileAt = bind(this.setTileAt, this);
      this.getTileAt = bind(this.getTileAt, this);
      this.zones = new lru(lruopts);
    }

    Tiler.prototype.getTileAt = function(level, x, y) {
      var q;
      q = defer();
      this.resolveZoneFor(level, x, y).then(function(zone) {
        if (zone) {
          return q.resolve(zone.tiles[x + '_' + y]);
        } else {
          return q.resolve(BAD_TILE);
        }
      }, function() {
        console.log('getTileAt got reject from resolveZoneFor for level ' + level + ' x ' + x + ' y ' + y);
        return q.reject(BAD_TILE);
      });
      return q;
    };

    Tiler.prototype.setTileAt = function(level, tile) {
      var q, x, y;
      q = defer();
      if (!tile || (tile && !tile.type) || !tile.x || !tile.y) {
        q.reject("bad tile format");
      } else {
        x = tile.x;
        y = tile.y;
        this.resolveZoneFor(level, x, y).then((function(_this) {
          return function(zone) {
            zone.tiles[x + '_' + y] = tile;
            return q.resolve(tile);
          };
        })(this));
      }
      return q;
    };

    Tiler.prototype.setAndPersistTiles = function(level, tiles) {
      var count, error, q, success, tileOps, zonesAffected;
      q = defer();
      zonesAffected = {};
      tileOps = [];
      error = function(err) {
        console.log('setAndPersistTiles error: ' + err);
        return q.reject(err);
      };
      success = function(tiles) {
        var k, v;
        for (k in zonesAffected) {
          v = zonesAffected[k];
          v.serialize();
        }
        return q.resolve(tiles);
      };
      count = tiles.length;
      tiles.forEach((function(_this) {
        return function(tile) {
          return _this.resolveZoneFor(level, tile.x, tile.y).then(function(zone) {
            zonesAffected[zone.id] = zone;
            tileOps.push(_this.setTileAt(level, tile));
            if (--count === 0) {
              return all(tileOps, error).then(success, error);
            }
          });
        };
      })(this));
      return q;
    };

    Tiler.prototype.resolveZoneFor = function(level, x, y) {
      var lruZone, q, tileid;
      q = defer();
      tileid = this.getZoneIdFor(level, x, y);
      lruZone = this.zones.get(tileid);
      if (lruZone) {
        q.resolve(lruZone);
      } else {
        this.cacheEngine.get(tileid).then((function(_this) {
          return function(exists) {
            var newzone;
            if (exists) {
              return _this.storageEngine.find('Zone', 'tileid', tileid).then(function(zone) {
                if (zone) {
                  this.zones.set(tileid, zone);
                  return q.resolve(zone);
                } else {
                  console.log('** Tiler Could not find supposedly existing zone ' + tileid + ' !!!!!');
                  return q.reject(BAD_TILE);
                }
              });
            } else {
              newzone = {
                type: 'Zone',
                id: tileid,
                tileid: tileid,
                items: {},
                entities: {},
                tiles: {}
              };
              return _this.modelEngine.createZone(newzone).then(function(zoneObj) {
                zoneObj.serialize();
                _this.zones.set(tileid, zoneObj);
                return _this.cacheEngine.set(tileid, 1).then(function() {
                  return q.resolve(zoneObj);
                });
              });
            }
          };
        })(this));
      }
      return q;
    };

    Tiler.prototype.getZoneIdFor = function(level, x, y) {
      var xr, yr, zx, zy;
      xr = x % TILE_SIDE;
      yr = y % TILE_SIDE;
      zx = x - xr;
      zy = y - yr;
      return level + '_' + zx + '_' + zy;
    };

    return Tiler;

  })();

  module.exports = Tiler;

}).call(this);

//# sourceMappingURL=Tiler.js.map

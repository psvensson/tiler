// Generated by CoffeeScript 1.10.0
(function() {
  var QuadTree, TILE_SIDE, Tiler, defer, lru, lruopts,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  QuadTree = require('area-qt');

  defer = require('node-promise').defer;

  lru = require('lru');

  lruopts = {
    max: 1000,
    maxAgeInMilliseconds: 1000 * 60 * 60 * 24 * 4
  };

  TILE_SIDE = 20;

  Tiler = (function() {
    function Tiler(storageEngine, cacheEngine, modelEngine) {
      this.storageEngine = storageEngine;
      this.cacheEngine = cacheEngine;
      this.modelEngine = modelEngine;
      this.resolveZoneFor = bind(this.resolveZoneFor, this);
      this.setTileAt = bind(this.setTileAt, this);
      this.getTileAt = bind(this.getTileAt, this);
      this.zones = new lru(lruopts);
    }

    Tiler.prototype.getTileAt = function(level, x, y) {
      var q;
      q = defer();
      this.resolveZoneFor(level, x, y).then((function(_this) {
        return function(zone) {
          if (zone) {
            return q.resolve(zone.tiles[x + '_' + y]);
          } else {
            return q.resolve();
          }
        };
      })(this));
      return q;
    };

    Tiler.prototype.setTileAt = function(level, x, y, tile) {
      var q;
      q = defer();
      this.resolveZoneFor(level, x, y).then((function(_this) {
        return function(zone) {
          zone.tiles[x + '_' + y] = tile;
          zone.serialize();
          return q.resolve(tile);
        };
      })(this));
      return q;
    };

    Tiler.prototype.resolveZoneFor = function(level, x, y) {
      var lruZone, q, tileid;
      q = defer();
      tileid = this.getZoneIdFor(level, x, y);
      lruZone = this.zones.get(tileid);
      if (lruZone) {
        q.resolve(lruZone);
      } else {
        this.cacheEngine.get(tileid).then((function(_this) {
          return function(exists) {
            var newzone;
            if (exists) {
              return _this.storageEngine.find('Zone', 'tileid', tileid).then(function(zone) {
                if (zone) {
                  this.zones.set(tileid, zone);
                  return q.resolve(zone);
                } else {
                  return console.log('** Tiler Could not find supposedly existing zone ' + tileid + ' !!!!!');
                }
              });
            } else {
              newzone = {
                type: 'Zone',
                id: tileid,
                tileid: tileid,
                items: {},
                entities: {},
                tiles: {}
              };
              return _this.modelEngine.createZone(newzone).then(function(zoneObj) {
                zoneObj.serialize();
                _this.zones.set(tileid, zoneObj);
                return _this.cacheEngine.set(tileid, 1).then(function() {
                  return q.resolve(zoneObj);
                });
              });
            }
          };
        })(this));
      }
      return q;
    };

    Tiler.prototype.getZoneIdFor = function(level, x, y) {
      var xr, yr, zx, zy;
      xr = x % TILE_SIDE;
      yr = y % TILE_SIDE;
      zx = x - xr;
      zy = y - yr;
      return level + '_' + zx + '_' + zy;
    };

    return Tiler;

  })();

  module.exports = Tiler;

}).call(this);

//# sourceMappingURL=Tiler.js.map

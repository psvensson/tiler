// Generated by CoffeeScript 1.9.3
(function() {
  var BAD_TILE, QuadTree, Siblings, TILE_SIDE, ZonesManager, debug, defer, lru, lruopts,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  defer = require('node-promise').defer;

  lru = require('lru');

  Siblings = require('./TilerSiblings');

  QuadTree = require('node-trees').QuadTree;

  debug = process.env["DEBUG"];

  TILE_SIDE = 20;

  BAD_TILE = {
    x: 0,
    y: 0,
    type: -1,
    ore: -1,
    stone: -1,
    features: []
  };

  lruopts = {
    max: 1000,
    maxAgeInMilliseconds: 1000 * 60 * 60 * 24 * 4
  };

  ZonesManager = (function() {
    function ZonesManager(te) {
      this.te = te;
      this.createNewZone = bind(this.createNewZone, this);
      this.resolveZoneFor = bind(this.resolveZoneFor, this);
      this.lookupZone = bind(this.lookupZone, this);
      this.registerZone = bind(this.registerZone, this);
      this.onSiblingUpdate = bind(this.onSiblingUpdate, this);
      this.shutdown = bind(this.shutdown, this);
      this.onZoneEvicted = bind(this.onZoneEvicted, this);
      this.zoneUnderConstruction = {};
      this.postContructionCallbacks = {};
      this.zones = new lru(lruopts);
      this.zones.on('evict', this.onZoneEvicted);
      this.siblings = new Siblings(this.te.myAddress, this.te.communicationManager, this.te.cacheEngine, this.te.modelEngine);
      this.te.communicationManager.registerForUpdates(this.te.myAddress, this.onSiblingUpdate);
    }

    ZonesManager.prototype.onZoneEvicted = function(zoneObj) {
      return this.siblings.deRegisterAsSiblingForZone(zoneObj);
    };

    ZonesManager.prototype.shutdown = function(zo) {
      return this.siblings.shutdown(zo);
    };

    ZonesManager.prototype.onSiblingUpdate = function(_command, cb) {
      var arg1, arg2, command;
      command = JSON.parse(_command);
      arg1 = command.arg1;
      arg2 = command.arg2;
      switch (command.cmd) {
        case Siblings.CMD_GET_OPLOG:
          return this.siblings.getOplog(command, cb);
        case Siblings.CMD_NEW_OPLOG_EPOCH:
          return this.siblings.newOplogEpoch(command, cb);
      }
    };

    ZonesManager.prototype.registerZone = function(q, zoneObj) {
      var arr, entityQT, itemQT, level, x, y, ztiles;
      arr = zoneObj.tileid.split('_');
      level = arr[0];
      x = arr[1];
      y = arr[2];
      itemQT = new QuadTree(8192, 32, 8, parseInt(x), parseInt(y));
      this.te.zoneItemQuadTrees[zoneObj.tileid] = itemQT;
      zoneObj.items.forEach((function(_this) {
        return function(item) {
          var iq;
          iq = defer();
          console.log('registerZone adding existing item from store to zone ' + item.id);
          return _this.te._setSomething(level, item, _this.te.zoneItemQuadTrees, 'items', iq, true).then(function(zo) {});
        };
      })(this));
      entityQT = new QuadTree(8192, 32, 8, parseInt(x), parseInt(y));
      this.te.zoneEntityQuadTrees[zoneObj.tileid] = entityQT;
      zoneObj.entities.forEach((function(_this) {
        return function(entity) {
          var eq;
          eq = defer();
          console.log('registerZone adding existing entity from store to zone ' + entity.id);
          return _this.te._setSomething(level, entity, _this.te.zoneEntityQuadTrees, 'entities', eq, true).then(function(zo) {});
        };
      })(this));
      ztiles = this.te.zoneTiles[zoneObj.tileid] || {};
      zoneObj.tiles.forEach((function(_this) {
        return function(tile) {
          return ztiles[tile.x + '_' + tile.y] = tile;
        };
      })(this));
      this.te.zoneTiles[zoneObj.tileid] = ztiles;
      if (debug) {
        console.log('Tiler.registerZone adds item and entity QTs for tileid ' + zoneObj.tileid);
      }
      this.zones.set(zoneObj.tileid, zoneObj);
      return this.siblings.registerAsSiblingForZone(zoneObj).then((function(_this) {
        return function() {
          var cbs;
          if (_this.zoneUnderConstruction[zoneObj.tileid] === true) {
            delete _this.zoneUnderConstruction[zoneObj.tileid];
            cbs = _this.postContructionCallbacks[zoneObj.tileid] || [];
            cbs.forEach(function(cb) {
              return cb();
            });
            return q.resolve(zoneObj);
          } else {
            return q.resolve(zoneObj);
          }
        };
      })(this));
    };

    ZonesManager.prototype.lookupZone = function(tileid, q) {
      var lruZone;
      lruZone = this.zones.get(tileid);
      if (lruZone) {
        return q.resolve(lruZone);
      } else {
        this.zoneUnderConstruction[tileid] = true;
        return this.te.cacheEngine.getAllValuesFor('zonereplica_' + tileid + ':*').then((function(_this) {
          return function(exists) {
            if (exists && exists.length && exists.length > 0) {
              return _this.te.storageEngine.find('Zone', 'id', tileid).then(function(zoneObj) {
                if (zoneObj) {
                  if (debug) {
                    console.log('Tiler.ZoneManager.lookupZone got back zone obj ' + zoneObj);
                  }
                  if (debug) {
                    console.log('Tiler.ZoneManager.lookupZone resolving ' + tileid + ' from db');
                  }
                  return _this.registerZone(q, zoneObj);
                } else {
                  console.log('** Tiler.ZoneManager Could not find supposedly existing zone ' + tileid + ' !!!!!');
                  return q.reject(BAD_TILE);
                }
              });
            } else {
              console.log('Tiler.lookupZone zone ' + tileid + ' ****************** not found, so creating new..');
              return _this.createNewZone(tileid).then(function(zoneObj) {
                return _this.registerZone(q, zoneObj);
              });
            }
          };
        })(this));
      }
    };

    ZonesManager.prototype.resolveZoneFor = function(level, x, y) {
      var cbs, q, tid, underConstruction;
      q = defer();
      tid = this.getZoneIdFor(level, x, y);
      underConstruction = this.zoneUnderConstruction[tid];
      if (underConstruction) {
        cbs = this.postContructionCallbacks[tid] || [];
        cbs.push((function(_this) {
          return function() {
            return _this.lookupZone(tid, q);
          };
        })(this));
        this.postContructionCallbacks[tid] = cbs;
      } else {
        this.lookupZone(tid, q);
      }
      return q;
    };

    ZonesManager.prototype.createNewZone = function(tileid) {
      var newzone, q;
      q = defer();
      newzone = {
        name: 'Zone_' + tileid,
        type: 'Zone',
        id: tileid,
        tileid: tileid,
        items: [],
        entities: [],
        tiles: []
      };
      this.te.modelEngine.createZone(newzone).then((function(_this) {
        return function(zoneObj) {
          return zoneObj.serialize().then(function() {
            _this.zones.set(tileid, zoneObj);
            return q.resolve(zoneObj);
          });
        };
      })(this));
      return q;
    };

    ZonesManager.prototype.getZoneIdFor = function(level, x, y) {
      var qleft, qtop, rv, xrest, yrest, zx, zy;
      xrest = x % TILE_SIDE;
      yrest = y % TILE_SIDE;
      if (y > -1) {
        qtop = (y - yrest) + TILE_SIDE;
      } else {
        qtop = y - yrest;
      }
      if (x > -1) {
        qleft = x - xrest;
      } else {
        qleft = (x - xrest) - TILE_SIDE;
      }
      zx = qleft;
      zy = qtop;
      rv = level + '_' + zx + '_' + zy;
      return rv;
    };

    return ZonesManager;

  })();

  module.exports = ZonesManager;

}).call(this);

//# sourceMappingURL=ZonesManager.js.map

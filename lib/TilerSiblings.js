// Generated by CoffeeScript 1.9.3
(function() {
  var Repl, TilerSiblings, debug, defer,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  defer = require('node-promise').defer;

  Repl = require('./TilerReplication');

  debug = process.env["DEBUG"];

  TilerSiblings = (function() {
    TilerSiblings.CMD_SET_TILE = 'setTile';

    TilerSiblings.CMD_ADD_ITEM = 'addItem';

    TilerSiblings.CMD_REMOVE_ITEM = 'removeItem';

    TilerSiblings.CMD_UPDATE_ITEM = 'updateItem';

    TilerSiblings.CMD_ADD_ENTITY = 'addEntity';

    TilerSiblings.CMD_REMOVE_ENTITY = 'removeEntity';

    TilerSiblings.CMD_UPDATE_ENTITY = 'updateEntity';

    TilerSiblings.CMD_NEW_OPLOG_EPOCH = 'newEpoch';

    TilerSiblings.CMD_GET_OPLOG = 'getOplog';

    TilerSiblings.PAUSE_BETWEEN_REGISTER_AND_GET_OPLOG = 500;

    function TilerSiblings(myAddress, communicationManager, cacheEngine, modelEngine) {
      this.myAddress = myAddress;
      this.communicationManager = communicationManager;
      this.cacheEngine = cacheEngine;
      this.modelEngine = modelEngine;
      this.deRegisterAsSiblingForZone = bind(this.deRegisterAsSiblingForZone, this);
      this.registerAsSiblingForZone = bind(this.registerAsSiblingForZone, this);
      this.sendCommand = bind(this.sendCommand, this);
      this.newOplogEpoch = bind(this.newOplogEpoch, this);
      this.shutdown = bind(this.shutdown, this);
      this.getOplog = bind(this.getOplog, this);
      this.repl = new Repl(this.myAddress, this.cacheEngine, this.communicationManager);
    }

    TilerSiblings.prototype.getOplog = function(command, cb) {
      return this.repl.onSiblingUpdate(command, cb);
    };

    TilerSiblings.prototype.shutdown = function(zo) {
      return this.repl.shutdown(zo);
    };

    TilerSiblings.prototype.newOplogEpoch = function(command, cb) {
      return this.repl.onSiblingUpdate(command, cb);
    };

    TilerSiblings.prototype.sendCommand = function(zoneObj, cmd, arg1, arg2) {
      return this.repl.getSiblingsForZone(zoneObj).then((function(_this) {
        return function(siblings) {
          var command;
          command = {
            cmd: cmd,
            arg1: arg1,
            arg2: arg2
          };
          if (arg1.toClient) {
            command.arg1 = arg1.toClient();
          }
          if (arg2.toClient) {
            command.arg2 = arg2.toClient();
          }
          _this.repl.addCommandToOplog(zoneObj, command);
          return siblings.forEach(function(sibling) {
            var adr;
            adr = sibling.split(',')[0];
            if (adr !== _this.myAddress) {
              if (!adr || adr === 'undefined') {
                console.log('Tiler-Engine:TilerSibling::sendCommand - adr is ' + adr);
                return xyzzy;
              } else {
                return _this.communicationManager.sendFunction(adr, command).then(function(reply) {
                  return console.log('TilerSiblings.sendCommand got reply ' + reply);
                });
              }
            }
          });
        };
      })(this));
    };

    TilerSiblings.prototype.registerAsSiblingForZone = function(zoneObj) {
      var q;
      q = defer();
      console.log('TilerSiblings.registerAsSiblingForZone ' + zoneObj.tileid + ' myAddress = ' + this.myAddress);
      this.repl.checkMasterReplicaFor(zoneObj).then((function(_this) {
        return function(becameMaster) {
          console.log('master checked. becameMaster = ' + becameMaster);
          if (becameMaster) {
            console.log('================== registerAsSiblingForZone done');
            return q.resolve();
          } else {
            _this.repl.setOurselvesAsReplica(zoneObj);
            return setTimeout(function() {
              return _this.repl.getAndExecuteAllOutstandingCommands(zoneObj).then(function() {
                console.log('==================  registerAsSiblingForZone done 2');
                return q.resolve();
              });
            }, _this.PAUSE_BETWEEN_REGISTER_AND_GET_OPLOG);
          }
        };
      })(this));
      return q;
    };

    TilerSiblings.prototype.deRegisterAsSiblingForZone = function(zoneObj) {
      return this.repl.shutdown(zoneObj);
    };

    return TilerSiblings;

  })();

  module.exports = TilerSiblings;

}).call(this);

//# sourceMappingURL=TilerSiblings.js.map

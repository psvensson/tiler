// Generated by CoffeeScript 1.10.0
(function() {
  var TilerSiblings, defer,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  defer = require('node-promise').defer;

  TilerSiblings = (function() {
    TilerSiblings.CMD_SET_TILE = 'setTile';

    TilerSiblings.CMD_ADD_ITEM = 'addItem';

    TilerSiblings.CMD_REMOVE_ITEM = 'removeItem';

    TilerSiblings.CMD_UPDATE_ITEM = 'updateItem';

    TilerSiblings.CMD_ADD_ENTITY = 'addEntity';

    TilerSiblings.CMD_REMOVE_ENTITY = 'removeEntity';

    TilerSiblings.CMD_UPDATE_ENTITY = 'updateEntity';

    function TilerSiblings(myAddress, cacheEngine, modelEngine, sendFunction) {
      this.myAddress = myAddress;
      this.cacheEngine = cacheEngine;
      this.modelEngine = modelEngine;
      this.sendFunction = sendFunction;
      this.getSiblingsForZone = bind(this.getSiblingsForZone, this);
      this.deRegisterAsSiblingForZone = bind(this.deRegisterAsSiblingForZone, this);
      this.registerAsSiblingForZone = bind(this.registerAsSiblingForZone, this);
      this.sendCommand = bind(this.sendCommand, this);
    }

    TilerSiblings.prototype.sendCommand = function(zoneObj, cmd, arg1, arg2) {
      return this.getSiblingsForZone(zoneObj).then((function(_this) {
        return function(siblings) {
          var command;
          command = {
            cmd: cmd,
            arg1: JSON.stringify(arg1, {
              arg2: JSON.stringify(arg2)
            })
          };
          return siblings.forEach(function(sibling) {
            return this.sendFunction(sibling, command);
          });
        };
      })(this));
    };

    TilerSiblings.prototype.registerAsSiblingForZone = function(zoneObj) {
      return this.cacheEngine.set('zonereplica_' + zoneObj.tileid + ':' + this.myAddress, this.myAddress);
    };

    TilerSiblings.prototype.deRegisterAsSiblingForZone = function(zoneObj) {
      return this.cacheEngine.del('zonereplica_' + zoneObj.tileid + ':' + this.myAddress);
    };

    TilerSiblings.prototype.getSiblingsForZone = function(zoneObj) {
      var q;
      q = defer();
      this.cacheEngine.getAllValuesFor('zonereplica_' + zoneObj.tileid + ':*').then((function(_this) {
        return function(replicaAddresses) {
          return q.resolve(replicaAddresses);
        };
      })(this));
      return q;
    };

    return TilerSiblings;

  })();

  module.exports = TilerSiblings;

}).call(this);

//# sourceMappingURL=TilerSiblings.js.map

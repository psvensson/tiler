// Generated by CoffeeScript 1.9.3
(function() {
  var TilerReplication, debug, defer;

  defer = require('node-promise').defer;

  debug = process.env["DEBUG"];

  "\nThe zone replica with the earliest timestamp (start-time) will act as master for the zone\n\nThe only thing the master does is persist the state each 60s (or so) of the zone, which also starts a new oplog epoch\n\nIf no new oplog epoch has been started in 120s (or so) then the next earliest timestamp replica will act as master.\n\nThe master is not elected, so if there are three replicas, and all but the lastest one goes off-line, that replica will wait for\n3x60s before it persists the zone.\n\nWhen one replica suspects another of being off-line, it will engage in reoeated polling and will reomve the replica from the\nlist of siblings for the zone after 5 retries (with 2000ms spacing), this will result in a fairly stateless replica management.\n\nBefore a replica master for a zone persist, it sends out a new epoch command to all replicas, which will be the array, keyed by epoch timestamp (in a hashtable)\nwhere every replica stores operations made on the zone. All action results in operations and will be sent from the originating replica to all others. All will store\nthe operations in the same way under the same key.\n\nWhen a new replica for a zone goes on-line, it will send a join command to any of the replicas, and then start to load the zone from persistent storage.\nThe replica receiving the command will send over the oplog for the current epoch of the zone to the newly joining replica.\n\nThe new replica will be able to see all the addresses of all other zone replicas through the global cache system (redis or pubsub equiv) and all other replicas\nwill directly start sending any new operations for the current epoch to the new replica.\n\nWhen the replica have loaded the persistent state of the zone and applied all operations sent for the current epoch ,and after that applied all incoming operations that\nwas sent as part of normal operations from all other replica members, then it will be considering itself synchronized and will open for operations itself.\n";

  TilerReplication = (function() {
    function TilerReplication() {}

    return TilerReplication;

  })();

  module.exports = TilerReplication;

}).call(this);

//# sourceMappingURL=TilerReplication.js.map
